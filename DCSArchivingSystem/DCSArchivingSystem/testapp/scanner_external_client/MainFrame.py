"""Subclass of gui.py, which is generated by wxFormBuilder."""

import wx
import gui
import urllib2
import cookielib
import webbrowser
import os
import random,string
import datetime
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
from simple_base import TwainBase

#You can either Poll the TWAIN source, or process the scanned image in an
#event callback. The event callback has not been fully tested using GTK.
#Specifically this does not work with Tkinter.
USE_CALLBACK=True

#Name of logfile
logFileName='log.txt'

#Version
version=1.0

#Implementing MainFrame
class MainFrame( gui.MainFrameBase, TwainBase):
        cookies = cookielib.LWPCookieJar()
        handlers = [
            urllib2.HTTPHandler(),
            urllib2.HTTPSHandler(),
            #urllib2.ProxyHandler({'http': PROXY}),
            urllib2.HTTPCookieProcessor(cookies)
            ]
        opener=register_openers()
        for handler in handlers:
                opener.add_handler(handler)

        params = {}
        filenameList = []
        logFile=None

        def log(self,msg):
            self.logFile.write('****LogMessage: ' + msg + '\n')

        def fetch(self,uri):
            req = urllib2.Request(uri,headers={'User-Agent' : 'Mozilla/5.0'}) #browser spoofing
            return self.opener.open(req)

        def getCookie(self,cookieName):
            for cookie in self.cookies:
                if cookie.name==cookieName: return cookie

        def setPage(self,page):
                self.pages=page
                self.m_lbCNowpage.ChangeValue(str(page))

        def setMaxPage(self,page):
                self.maxPage=page
                self.m_lbAllpages.ChangeValue(str(page))

        def cleanUp(self):
                self.m_bitmap.SetBitmap(wx.NullBitmap)
                fileList=os.listdir('.')
                for x in self.params:
                        if type(self.params[x])==file:
                                print 'closing'
                                self.params[x].close()
                                self.params[x] = None
                for x in fileList:
                        if ".bmp" in x: os.remove(x)
        
        def setParams(self,facultyID,facultyName,titleID,titleName,userid,upload_link):
                self.logFile=open(logFileName,'w')
                self.logFile.write("DCS Archiving System Scanner Client %s\nSession start: %s\n" %(version,datetime.datetime.now().strftime("%Y-%m-%d %H:%M")))
                self.name=facultyName
                self.m_lbFaculty.ChangeValue(self.name)
                self.fid=facultyID
                self.maxPage=1
                self.setMaxPage(self.maxPage)
                self.setPage(self.maxPage)
                self.tid=titleID
                self.m_lbDoctype.ChangeValue(titleName)
                self.m_btChangePage.SetRange(1,self.maxPage)
                self.userid=userid
                self.filenameList.append(None)
                self.ulink=upload_link
                self.cleanUp()

        def genFilename(self):
                while True:
                        result = ''.join(random.choice(string.ascii_lowercase))
                        result += ''.join(random.choice(string.ascii_lowercase + string.digits) for x in range(4)) + ".bmp"
                        if result not in self.filenameList: break
                return result

        def destroyFile(self,page):
                if os.path.isfile(self.filenameList[page-1]):
                        self.params["file_" + str(page)].close()
                        os.remove(self.filenameList[page-1])

        def showDialog(self,msg,hdr='Message',extra_args=1):
                dial = wx.MessageDialog(None, msg, hdr, wx.OK | extra_args)
                dial.ShowModal()
        
        def OnClose( self, event ):
                self.log('MainFrame: Exiting')
                self.logFile.close()
                self.cleanUp()
                self.Terminate()
                self.Destroy()
        
        def m_btConnectClick( self, event ):
                self.OpenScanner(self.GetHandle(), UseCallback=USE_CALLBACK)
        
        def m_btConnectHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Selects a scanner for acquiring images")
        
        def m_btConnectHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")
        
        def m_btScanClick( self, event ):
                self.tempName = self.genFilename()
                self.AcquireNatively(self.tempName,self.filenameList[self.pages-1]!=None)
        
        def m_btScanHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Scans an image")
        
        def m_btScanHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_btAddClick( self, event ):
                self.log('MainFrame: Add page')
                self.m_bitmap.SetBitmap(wx.NullBitmap)
                self.setMaxPage(self.maxPage+1)
                self.setPage(self.maxPage)
                self.m_btChangePage.SetRange(1,self.maxPage)
                self.filenameList.append(None)

                self.log("MainFrame: Filename list: %s" %str(self.filenameList))
    
        def m_btAddHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Adds a new page")
    
        def m_btAddHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_btRemoveClick( self, event ):
                self.log('MainFrame: Delete page ')
                
                #If one page remains, do not delete!
                if self.maxPage==1:
                        self.showDialog('Cannot delete the remaining page.')
                        self.log('MainFrame: One page remaining. Will not delete ')
                        return

                #Destroy previous file if an image is assigned
                if self.filenameList[self.pages-1]!=None:
                        self.destroyFile(self.pages)
                        del self.params["file_" + str(self.pages)]

                #Move images after the deleted page
                for x in range(1,self.maxPage):
                        if x>=self.pages and self.filenameList[x]!=None: self.params.update({"file_" + str(x): open(self.filenameList[x], "rb")})
                if "file_" + str(self.maxPage) in self.params.keys(): del self.params["file_" + str(self.maxPage)]
                del self.filenameList[self.pages-1]

                #If currently at last page
                if self.pages==self.maxPage: self.setPage(self.pages-1)

                #Decrement maxPages
                self.setMaxPage(self.maxPage-1)

                #Reflect changes in navigation buttons
                self.m_btChangePage.SetRange(1,self.maxPage)

                #Refreshes display image
                self.DisplayImage(self.filenameList[self.pages-1])

                self.log("MainFrame: Filename list: %s" %str(self.filenameList))
                self.log("MainFrame: File params: %s" %str(self.params))
    
        def m_btRemoveHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Deletes the current page")
    
        def m_btRemoveHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_btUploadClick( self, event ):
                #Checks if anything is uploaded

                if len(self.params)==0:
                        self.showDialog('No images to upload.')
                        self.log('MainFrame: No image to upload!')
                        return

                busyDlg=wx.BusyInfo("Uploading files to %s" %(self.ulink))
                self.log("MainFrame: Connecting to " + self.ulink)
                res=self.fetch(self.ulink)
                XCSRFToken=self.getCookie("csrftoken")

                #"http://httpbin.org/post": Test link. Change to appropriate upload link
                self.params.update({"fid": str(self.fid), "userid": self.userid, "transaction": self.tid})
                datagen, headers = multipart_encode(self.params)
                request=urllib2.Request(self.ulink,datagen,headers)
                request.add_header("X-CSRFToken", XCSRFToken.value)
                request.add_header("User-Agent", "Mozilla/5.0") #browser spoofing
                try:
                    print urllib2.urlopen(request).read()
                except urllib2.HTTPError, error:
                    busyDlg=None
                    #with open("results.html", "w") as f:
                    #        f.write(error.read())
                    #webbrowser.open("results.html")
                    self.log('MainFrame: Error uploading file(s)')
                    self.showDialog('Error uploading image(s). Please try again.',hdr='Error',extra_args=wx.ICON_ERROR)
                    return
                busyDlg=None
                self.showDialog('Upload successful.')
                self.log('MainFrame: Upload successful')
                
                        
        def m_btUploadHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Uploads an image")
        
        def m_btUploadHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_btChangePageHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Navigates through pages")

        def m_btChangePageHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")
                
        def m_btChangePagePrev( self, event ):
                if self.pages>1:
                        self.setPage(self.pages-1)
                        self.log('MainFrame: Rendering page ' + str(self.pages) + ': ' + str(self.filenameList[self.pages-1]))
                        self.DisplayImage(self.filenameList[self.pages-1])
    
        def m_btChangePageNext( self, event ):
                if self.pages<self.maxPage:
                        self.setPage(self.pages+1)
                        self.log('MainFrame: Rendering page ' + str(self.pages) + ': ' + str(self.filenameList[self.pages-1]))
                        self.DisplayImage(self.filenameList[self.pages-1])

        def m_btExitClick( self, event ):
                self.Close(1)
        
        def m_btExitHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Terminates this program")
        
        def m_btExitHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_aboutClick( self, event ):
                self.log('MainFrame: About info')
                self.showDialog("""DCS Archiving System Scanner Client version %s, Copyright (C) 2013 Team Park
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
http://www.gnu.org/licenses/gpl-2.0.html

Used portions of code from twainmodule simple_wx.py, modified 12 December 2012:
http://twainmodule.sourceforge.net/docs/quickstart.html""" %version,hdr='About')

        def DisplayImage(self, ImageFileName):
                self.log("MainFrame: Display Image: %s" %ImageFileName)
                if ImageFileName!=None and os.path.isfile(ImageFileName):
                        bmp = wx.Image(ImageFileName, wx.BITMAP_TYPE_BMP).ConvertToBitmap()
                else:
                        bmp = wx.NullBitmap
                self.m_bitmap.SetBitmap(bmp)
                self.m_scrolledWindow.maxWidth = bmp.GetWidth()
                self.m_scrolledWindow.maxHeight = bmp.GetHeight()
                self.m_scrolledWindow.SetScrollbars(20, 20, bmp.GetWidth()/20, bmp.GetHeight()/20)
                self.m_bitmap.Refresh()

        def UpdateFiles(self,replacement):
                #If an image is assigned to the page
                if replacement:
                        self.log('MainFrame: Found ' + self.filenameList[self.pages-1] + '. Replacing...')
                        self.m_bitmap.GetBitmap().Destroy()
                        self.destroyFile(self.pages)

                #Otherwise, skip to here
                self.filenameList[self.pages-1] = self.tempName
                self.log('MainFrame: Saving scanned image to ' + self.filenameList[self.pages-1])
                self.params.update({"file_" + str(self.pages): open(self.filenameList[self.pages-1], "rb")})
                
                
        
        
