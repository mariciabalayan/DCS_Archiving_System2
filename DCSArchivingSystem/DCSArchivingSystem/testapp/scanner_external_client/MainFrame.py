"""Subclass of MainFrameBase, which is generated by wxFormBuilder."""

import wx
import gui
import urllib2
import cookielib
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
from simple_base import TwainBase

# You can either Poll the TWAIN source, or process the scanned image in an
# event callback. The event callback has not been fully tested using GTK.
# Specifically this does not work with Tkinter.
USE_CALLBACK=True
PROXY='http://proxy8.upd.edu.ph:8080'

#pOpener=register_openers()
#pOpener.add_handler(urllib2.HTTPCookieProcessor(cookielib.CookieJar()))

# Implementing MainFrameBase
class MainFrame( gui.MainFrameBase, TwainBase):
        cookies = cookielib.LWPCookieJar()
        handlers = [
            urllib2.HTTPHandler(),
            urllib2.HTTPSHandler(),
            urllib2.ProxyHandler({'http': PROXY}),
            urllib2.HTTPCookieProcessor(cookies)
            ]
        opener=register_openers()
        for handler in handlers:
                opener.add_handler(handler)

        def fetch(self,uri):
            req = urllib2.Request(uri,headers={'User-Agent' : 'Mozilla/5.0'}) #browser spoofing
            return self.opener.open(req)

        def getCookie(self,cookieName):
            for cookie in self.cookies:
                if cookie.name==cookieName: return cookie
        
        def setParams(self,facultyName,totalPages,formTitle,sessid):
                self.name=facultyName
                self.pages=totalPages
                self.title=formTitle
                self.sessid=sessid
                print self.name
                print self.pages
                print self.title
        
        def OnClose( self, event ):
                self.Terminate()
                self.Destroy()
        
        def m_btConnectClick( self, event ):
                self.OpenScanner(self.GetHandle(), ProductName="Simple wxPython Demo", UseCallback=USE_CALLBACK)
        
        def m_btConnectHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Select a scanner for acquiring images")
        
        def m_btConnectHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")
        
        def m_btScanClick( self, event ):
                return self.AcquireNatively()
        
        def m_btScanHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Scan an image")
        
        def m_btScanHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")
        
        def m_btUploadClick( self, event ):
                #uri = "http://127.0.0.1:8000/upload/"
                #request=urllib2.Request("http://127.0.0.1:8000/upload/")
                #print urllib2.urlopen(request).read()

                res=self.fetch("http://127.0.0.1:8000/upload/")
                XCSRFToken=self.getCookie("csrftoken")

                #"http://httpbin.org/post": Test link. Change to appropriate upload link
                datagen, headers = multipart_encode({"fileContents": open("tmpnatively.bmp", "rb"), "faculty": str(self.name), "filename": str(self.name+"_"+self.title+"_"+str(self.pages)+".bmp"), "page": str(self.pages), "sessid": self.sessid})
                request=urllib2.Request("http://127.0.0.1:8000/upload/",datagen,headers)
                request.add_header("X-CSRFToken", XCSRFToken.value)
                request.add_header("User-Agent", "Mozilla/5.0") #browser spoofing
                print urllib2.urlopen(request).read()
                        
        def m_btUploadHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Upload an image")
        
        def m_btUploadHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def m_btExitClick( self, event ):
                self.Close(1)
        
        def m_btExitHoverIn( self, event ):
                self.m_statusBar.SetStatusText("Terminate this program")
        
        def m_btExitHoverOut( self, event ):
                self.m_statusBar.SetStatusText("")

        def DisplayImage(self, ImageFileName):
                bmp = wx.Image(ImageFileName, wx.BITMAP_TYPE_BMP).ConvertToBitmap()
                self.m_bitmap.SetBitmap(bmp)
                self.m_scrolledWindow.maxWidth = bmp.GetWidth()
                self.m_scrolledWindow.maxHeight = bmp.GetHeight()
                self.m_scrolledWindow.SetScrollbars(20, 20, bmp.GetWidth()/20, bmp.GetHeight()/20)
                self.m_bitmap.Refresh()
                
                
        
        
